-- Services
local workspace = game.Workspace
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local TweenService = game:GetService("TweenService")
local ContentProvider = game:GetService("ContentProvider") -- For preloading assets

-- Configuration for highlighting
local HIGHLIGHT_COLOR = Color3.fromRGB(0, 255, 255) -- Cyan
local HIGHLIGHT_TRANSPARENCY = 0.5

-- Global state variables
local highlightingEnabled = false -- Initial state: highlighting is OFF
local autoRandomizeEnabled = false -- NEW: Initial state: auto-randomization is OFF
local stopOnRarestEnabled = false -- NEW: Initial state: auto-stop on rarest is OFF
local playerFarm = nil -- Reference to the detected player farm
local highlightedObjects = {} -- Key: Instance, Value: {SelectionBox, BillboardGui, OriginalText, TextLabel, FormattedEggName}
local activeConnections = {} -- Table to store all active connections for cleanup
local autoRandomizeLoop = nil -- NEW: To hold the auto randomize task

-- NEW: Cooldown variables
local RANDOMIZE_COOLDOWN_TIME = 5 -- Cooldown in seconds for manual randomize
local AUTO_RANDOMIZE_INTERVAL = 1.5 -- NEW: Interval in seconds for auto randomize (Increased from 0.5 to 1.5)
local lastRandomizeTime = 0 -- Last time the manual randomize button was clicked

-- NEW: Egg content data structure
local EGG_CONTENTS = {
    ["Anti Bee Egg"] = {
        {name = "Wasp", chance = 55},
        {name = "Tarantula Hawk", chance = 30},
        {name = "Moth", chance = 13.75},
        {name = "Butterfly", chance = 1},
        {name = "Disco Bee", chance = 0.25},
    },
    ["Bee Egg"] = {
        {name = "Bee", chance = 65},
        {name = "Honey Bee", chance = 25},
        {name = "Bear Bee", chance = 5},
        {name = "Petal Bee", chance = 4},
        {name = "Queen Bee", chance = 1},
    },
    ["Bug Egg"] = {
        {name = "Snail", chance = 40},
        {name = "Giant Ant", chance = 30},
        {name = "Caterpillar", chance = 25},
        {name = "Praying Mantis", chance = 4},
        {name = "Dragonfly", chance = 1},
    },
    ["Common Egg"] = {
        {name = "Golden Lab", chance = 33.33},
        {name = "Dog", chance = 33.33},
        {name = "Bunny", chance = 33.33},
    },
    ["Common Summer Egg"] = {
        {name = "Starfish", chance = 50},
        {name = "Seagull", chance = 25},
        {name = "Crab", chance = 25},
    },
    ["Dinosaur Egg"] = {
        {name = "Raptor", chance = 35},
        {name = "Triceratops", chance = 32.5},
        {name = "Stegosaurus", chance = 28},
        {name = "Pterodactyl", chance = 3},
        {name = "Brontosaurus", chance = 1},
        {name = "T-Rex", chance = 0.5},
    },
    ["Exotic Bug Egg"] = { {name = "Unknown Exotic Bug Pet", chance = 100} },
    ["Legendary Egg"] = {
        {name = "Cow", chance = 42.55},
        {name = "Silver Monkey", chance = 42.55},
        {name = "Sea Otter", chance = 10.64},
        {name = "Turtle", chance = 2.13},
        {name = "Polar Bear", chance = 2.13},
    },
    ["Mythical Egg"] = {
        {name = "Grey Mouse", chance = 35.71},
        {name = "Brown Mouse", chance = 26.79},
        {name = "Squirrel", chance = 26.79},
        {name = "Red Giant Ant", chance = 8.93},
        {name = "Red Fox", chance = 1.79},
    },
    ["Night Egg"] = {
        {name = "Hedgehog", chance = 49},
        {name = "Mole", chance = 22},
        {name = "Frog", chance = 14},
        {name = "Echo Frog", chance = 10},
        {name = "Night Owl", chance = 4},
        {name = "Raccoon", chance = 1},
    },
    ["Oasis Egg"] = {
        {name = "Meerkat", chance = 45},
        {name = "Sand Snake", chance = 34.5},
        {name = "Axolotl", chance = 15},
        {name = "Hyacinth Macaw", chance = 5},
        {name = "Fennec Fox", chance = 0.5},
    },
    ["Paradise Egg"] = {
        {name = "Ostrich", chance = 40},
        {name = "Peacock", chance = 30},
        {name = "Capybara", chance = 21},
        {name = "Scarlet Macaw", chance = 8},
        {name = "Mimic Octopus", chance = 1},
    },
    ["Premium Anti Bee Egg"] = {
        {name = "Wasp", chance = 55},
        {name = "Tarantula Hawk", chance = 30},
        {name = "Moth", chance = 13.75},
        {name = "Butterfly", chance = 1},
        {name = "Disco Bee", chance = 0.25},
    },
    ["Premium Night Egg"] = {
        {name = "Hedgehog", chance = 49},
        {name = "Mole", chance = 22},
        {name = "Frog", chance = 14},
        {name = "Echo Frog", chance = 10},
        {name = "Night Owl", chance = 4},
        {name = "Raccoon", chance = 1},
    },
    ["Premium Oasis Egg"] = {
        {name = "Meerkat", chance = 45},
        {name = "Sand Snake", chance = 34.5},
        {name = "Axolotl", chance = 15},
        {name = "Hyacinth Macaw", chance = 5},
        {name = "Fennec Fox", chance = 0.5},
    },
    ["Premium Primal Egg"] = {
        {name = "Parasaurolophus", chance = 34},
        {name = "Iguanodon", chance = 32.5},
        {name = "Pachycephalosaurus", chance = 28},
        {name = "Dilophosaurus", chance = 3},
        {name = "Ankylosaurus", chance = 1},
        {name = "Spinosaurus", chance = 0.5},
    },
    ["Primal Egg"] = {
        {name = "Parasaurolophus", chance = 34},
        {name = "Iguanodon", chance = 32.5},
        {name = "Pachycephalosaurus", chance = 28},
        {name = "Dilophosaurus", chance = 3},
        {name = "Ankylosaurus", chance = 1},
        {name = "Spinosaurus", chance = 0.5},
    },
    ["Rainbow Premium Primal Egg"] = {
        {name = "Parasaurolophus", chance = 34},
        {name = "Iguanodon", chance = 32.5},
        {name = "Pachycephalosaurus", chance = 28},
        {name = "Dilophosaurus", chance = 3},
        {name = "Ankylosaurus", chance = 1},
        {name = "Spinosaurus", chance = 0.5},
    },
    ["Rare Egg"] = {
        {name = "Orange Tabby", chance = 33.33},
        {name = "Spotted Deer", chance = 25},
        {name = "Pig", chance = 16.67},
        {name = "Rooster", chance = 16.67},
        {name = "Monkey", chance = 8.33},
    },
    ["Rare Summer Egg"] = {
        {name = "Sea Turtle", chance = 33.33},
        {name = "Flamingo", chance = 16.67},
        {name = "Toucan", chance = 25},
        {name = "Seal", chance = 10},
        {name = "Orangutan", chance = 4},
    },
    ["Uncommon Egg"] = {
        {name = "Black Bunny", chance = 25},
        {name = "Chicken", chance = 25},
        {name = "Cat", chance = 25},
        {name = "Deer", chance = 25},
    },
}

--- GUI Elements ---
local mainGui = Instance.new("ScreenGui")
mainGui.Name = "EggESPGUI"
mainGui.ResetOnSpawn = false
mainGui.Parent = PlayerGui

--- Loading Screen Elements ---
local loadingFrame = Instance.new("Frame")
loadingFrame.Name = "LoadingFrame"
loadingFrame.Size = UDim2.new(0.4, 0, 0.2, 0)
loadingFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
loadingFrame.AnchorPoint = Vector2.new(0.5, 0.5)
loadingFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
loadingFrame.BorderSizePixel = 0
loadingFrame.Parent = mainGui

local loadingCorner = Instance.new("UICorner")
loadingCorner.CornerRadius = UDim.new(0, 15)
loadingCorner.Parent = loadingFrame

local loadingStroke = Instance.new("UIStroke")
loadingStroke.Color = Color3.fromRGB(70, 70, 70)
loadingStroke.Thickness = 2
loadingStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
loadingStroke.Parent = loadingFrame

local loadingText = Instance.new("TextLabel")
loadingText.Name = "LoadingText"
loadingText.Size = UDim2.new(1, 0, 0.4, 0)
loadingText.Position = UDim2.new(0, 0, 0, 0)
loadingText.Text = "Loading Egg ESP... 🚀"
loadingText.TextColor3 = Color3.fromRGB(200, 200, 200)
loadingText.Font = Enum.Font.GothamBold
loadingText.TextSize = 20
loadingText.BackgroundTransparency = 1
loadingText.Parent = loadingFrame

local progressBarContainer = Instance.new("Frame")
progressBarContainer.Name = "ProgressBarContainer"
progressBarContainer.Size = UDim2.new(0.8, 0, 0.25, 0)
progressBarContainer.Position = UDim2.new(0.1, 0, 0.45, 0)
progressBarContainer.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
progressBarContainer.BorderSizePixel = 0
progressBarContainer.Parent = loadingFrame

local progressBarCorner = Instance.new("UICorner")
progressBarCorner.CornerRadius = UDim.new(0, 8)
progressBarCorner.Parent = progressBarContainer

local progressBarFill = Instance.new("Frame")
progressBarFill.Name = "ProgressBarFill"
progressBarFill.Size = UDim2.new(0, 0, 1, 0)
progressBarFill.Position = UDim2.new(0, 0, 0, 0)
progressBarFill.BackgroundColor3 = Color3.fromRGB(0, 200, 0)
progressBarFill.BorderSizePixel = 0
progressBarFill.Parent = progressBarContainer

local progressBarFillCorner = Instance.new("UICorner")
progressBarFillCorner.CornerRadius = UDim.new(0, 8)
progressBarFillCorner.Parent = progressBarFill

local progressPercentage = Instance.new("TextLabel")
progressPercentage.Name = "ProgressPercentage"
progressPercentage.Size = UDim2.new(1, 0, 0.3, 0)
progressPercentage.Position = UDim2.new(0, 0, 0.7, 0)
progressPercentage.Text = "0%"
progressPercentage.TextColor3 = Color3.fromRGB(255, 255, 255)
progressPercentage.Font = Enum.Font.GothamBold
progressPercentage.TextSize = 18
progressPercentage.BackgroundTransparency = 1
progressPercentage.Parent = loadingFrame

--- Main Control Frame Elements (initially hidden) ---
local frame = Instance.new("Frame")
frame.Name = "ControlFrame"
frame.Size = UDim2.new(0, 280, 0, 410) -- Increased height to accommodate new buttons and status label
frame.Position = UDim2.new(0.5, -140, 0, 30)
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
frame.BorderSizePixel = 0
frame.Active = true
frame.Draggable = true
frame.AnchorPoint = Vector2.new(0.5, 0)
frame.Visible = false
frame.Parent = mainGui

local uiCorner = Instance.new("UICorner")
uiCorner.CornerRadius = UDim.new(0, 15)
uiCorner.Parent = frame

local uiGradient = Instance.new("UIGradient")
uiGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(45, 45, 45)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(20, 20, 20))
}
uiGradient.Rotation = 90
uiGradient.Parent = frame

local uiStroke = Instance.new("UIStroke")
uiStroke.Color = Color3.fromRGB(60, 60, 60)
uiStroke.Thickness = 2
uiStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
uiStroke.Parent = frame

-- Add UIListLayout for automatic spacing
local listLayout = Instance.new("UIListLayout")
listLayout.FillDirection = Enum.FillDirection.Vertical
listLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
listLayout.VerticalAlignment = Enum.VerticalAlignment.Top
listLayout.Padding = UDim.new(0, 10) -- Adjusted padding: increased from 8 to 10
listLayout.Parent = frame

-- Add UIPadding for overall internal padding
local uiPadding = Instance.new("UIPadding")
uiPadding.PaddingTop = UDim.new(0, 20) -- Adjusted padding: increased from 15 to 20
uiPadding.PaddingBottom = UDim.new(0, 20) -- Adjusted padding: increased from 15 to 20
uiPadding.PaddingLeft = UDim.new(0, 20) -- Adjusted padding: increased from 15 to 20
uiPadding.PaddingRight = UDim.new(0, 20) -- Adjusted padding: increased from 15 to 20
uiPadding.Parent = frame

-- EGG ESP Title at the top
local titleLabel = Instance.new("TextLabel")
titleLabel.Name = "TitleLabel"
titleLabel.Size = UDim2.new(1, 0, 0, 30)
titleLabel.Text = "🥚 EGG ESP 🚀"
titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
titleLabel.Font = Enum.Font.FredokaOne
titleLabel.TextSize = 26
titleLabel.BackgroundTransparency = 1
titleLabel.Parent = frame

-- Status label defaults to INACTIVE
local statusLabel = Instance.new("TextLabel")
statusLabel.Name = "StatusLabel"
statusLabel.Size = UDim2.new(1, 0, 0, 40) -- Increased height for potential 2 lines
statusLabel.Text = "Status: INACTIVE 💤"
statusLabel.TextColor3 = Color3.fromRGB(200, 150, 0) -- Orange for inactive
statusLabel.Font = Enum.Font.GothamBold
statusLabel.TextSize = 16 -- Adjusted TextSize
statusLabel.TextWrapped = true -- NEW: Allow text to wrap to multiple lines
statusLabel.BackgroundTransparency = 1
statusLabel.Parent = frame

local toggleButton = Instance.new("TextButton")
toggleButton.Name = "ToggleButton"
toggleButton.Size = UDim2.new(0.95, 0, 0, 40)
toggleButton.Text = "👁️ ESP: OFF 🚫" -- Default text for inactive state (Matches image style)
toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50) -- Default color for inactive state (Matches image style)
toggleButton.Font = Enum.Font.GothamBold
toggleButton.TextSize = 15 -- Adjusted TextSize
toggleButton.Parent = frame

local toggleButtonCorner = Instance.new("UICorner")
toggleButtonCorner.CornerRadius = UDim.new(0, 10)
toggleButtonCorner.Parent = toggleButton

local toggleButtonStroke = Instance.new("UIStroke")
toggleButtonStroke.Color = Color3.fromRGB(30, 30, 30) -- Default stroke for inactive state (Matches image style)
toggleButtonStroke.Thickness = 1.5
toggleButtonStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
toggleButtonStroke.Parent = toggleButton

-- Manual Randomize Button
local randomizeButton = Instance.new("TextButton")
randomizeButton.Name = "RandomizeButton"
randomizeButton.Size = UDim2.new(0.95, 0, 0, 40)
randomizeButton.Text = "🎲 Randomize Egg Pets (Manual)" -- Text updated with icon
randomizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
randomizeButton.BackgroundColor3 = Color3.fromRGB(255, 100, 0) -- Orange color (Matches image style)
randomizeButton.Font = Enum.Font.GothamBold
randomizeButton.TextSize = 15 -- Adjusted TextSize
randomizeButton.Parent = frame

local randomizeButtonCorner = Instance.new("UICorner")
randomizeButtonCorner.CornerRadius = UDim.new(0, 10)
randomizeButtonCorner.Parent = randomizeButton

local randomizeButtonStroke = Instance.new("UIStroke")
randomizeButtonStroke.Color = Color3.fromRGB(200, 80, 0) -- Darker orange stroke (Matches image style)
randomizeButtonStroke.Thickness = 1.5
randomizeButtonStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
randomizeButtonStroke.Parent = randomizeButton

-- NEW: Auto Randomize Toggle
local autoRandomizeToggle = Instance.new("TextButton")
autoRandomizeToggle.Name = "AutoRandomizeToggle"
autoRandomizeToggle.Size = UDim2.new(0.95, 0, 0, 40)
autoRandomizeToggle.Text = "🔄 Auto Randomize: OFF ❌" -- Text updated with icon
autoRandomizeToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
autoRandomizeToggle.BackgroundColor3 = Color3.fromRGB(0, 150, 0) -- Green for OFF (Matches image style)
autoRandomizeToggle.Font = Enum.Font.GothamBold
autoRandomizeToggle.TextSize = 15 -- Adjusted TextSize
autoRandomizeToggle.Parent = frame

local autoRandomizeToggleCorner = Instance.new("UICorner")
autoRandomizeToggleCorner.CornerRadius = UDim.new(0, 10)
autoRandomizeToggleCorner.Parent = autoRandomizeToggle

local autoRandomizeToggleStroke = Instance.new("UIStroke")
autoRandomizeToggleStroke.Color = Color3.fromRGB(0, 100, 0) -- Darker green stroke
autoRandomizeToggleStroke.Thickness = 1.5
autoRandomizeToggleStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
autoRandomizeToggleStroke.Parent = autoRandomizeToggle

-- NEW: Auto Stop on Rarest Toggle
local rarestPetStopToggle = Instance.new("TextButton")
rarestPetStopToggle.Name = "RarestPetStopToggle"
rarestPetStopToggle.Size = UDim2.new(0.95, 0, 0, 40)
rarestPetStopToggle.Text = "⭐ Auto Stop on Rarest: OFF 💤" -- Text updated with icon
rarestPetStopToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
rarestPetStopToggle.BackgroundColor3 = Color3.fromRGB(100, 100, 100) -- Grey for OFF
rarestPetStopToggle.Font = Enum.Font.GothamBold
rarestPetStopToggle.TextSize = 15 -- Adjusted TextSize
rarestPetStopToggle.Parent = frame

local rarestPetStopToggleCorner = Instance.new("UICorner")
rarestPetStopToggleCorner.CornerRadius = UDim.new(0, 10)
rarestPetStopToggleCorner.Parent = rarestPetStopToggle

local rarestPetStopToggleStroke = Instance.new("UIStroke")
rarestPetStopToggleStroke.Color = Color3.fromRGB(70, 70, 70)
rarestPetStopToggleStroke.Thickness = 1.5
rarestPetStopToggleStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
rarestPetStopToggleStroke.Parent = rarestPetStopToggle

local killButton = Instance.new("TextButton")
killButton.Name = "KillButton"
killButton.Size = UDim2.new(0.95, 0, 0, 40)
killButton.Text = "Terminate Script 💀"
killButton.TextColor3 = Color3.fromRGB(255, 255, 255)
killButton.BackgroundColor3 = Color3.fromRGB(150, 0, 0)
killButton.Font = Enum.Font.GothamBold
killButton.TextSize = 15 -- Adjusted TextSize
killButton.Parent = frame

local killButtonCorner = Instance.new("UICorner")
killButtonCorner.CornerRadius = UDim.new(0, 10)
killButtonCorner.Parent = killButton

local killButtonStroke = Instance.new("UIStroke")
killButtonStroke.Color = Color3.fromRGB(100, 0, 0)
killButtonStroke.Thickness = 1.5
killButtonStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
killButtonStroke.Parent = killButton

-- Author label at the bottom
local authorLabel = Instance.new("TextLabel")
authorLabel.Name = "AuthorLabel"
authorLabel.Size = UDim2.new(1, 0, 0, 16)
authorLabel.Text = "by @Pixiemo ✨"
authorLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
authorLabel.Font = Enum.Font.Gotham
authorLabel.TextSize = 14
authorLabel.BackgroundTransparency = 1
authorLabel.Parent = frame


-- Helper function to add connections to the tracking table
local function addConnection(connection)
    table.insert(activeConnections, connection)
end

-- Function to remove highlight and label from an instance
local function unhighlightInstance(instanceToUnhighlight)
    local highlightComponents = highlightedObjects[instanceToUnhighlight]
    if highlightComponents then
        for _, component in ipairs(highlightComponents) do
            if component and component.Parent then
                component:Destroy()
            end
        end
        highlightedObjects[instanceToUnhighlight] = nil
    end
end

-- NEW FUNCTION: Get a random pet based on chances
local function getRandomPetFromEgg(eggType)
    local contents = EGG_CONTENTS[eggType]
    if not contents then
        return "???" -- No data for this egg type
    end

    local totalChance = 0
    for _, petInfo in ipairs(contents) do
        totalChance = totalChance + petInfo.chance
    end

    local randomNumber = math.random() * totalChance -- Use math.random() for float, multiply by total chance

    local cumulativeChance = 0
    for _, petInfo in ipairs(contents) do
        cumulativeChance = cumulativeChance + petInfo.chance
        if randomNumber <= cumulativeChance then
            return petInfo.name
        end
    end

    return contents[1].name -- Fallback to the first pet if something goes wrong
end

-- NEW FUNCTION: Get the most common pet for initial display
local function getMostCommonPet(eggType)
    local contents = EGG_CONTENTS[eggType]
    if not contents or #contents == 0 then
        return "???"
    end

    local mostCommon = contents[1]
    for i = 2, #contents do
        if contents[i].chance > mostCommon.chance then
            mostCommon = contents[i]
        end
    end
    return mostCommon.name
end

-- NEW FUNCTION: Get the rarest pet for highlighting
local function getRarestPet(eggType)
    local contents = EGG_CONTENTS[eggType]
    if not contents or #contents == 0 then
        return nil
    end

    local rarest = contents[1]
    for i = 2, #contents do
        if contents[i].chance < rarest.chance then
            rarest = contents[i]
        end
    end
    return rarest.name
end

-- Function to highlight a given instance (Part or Model) and add a text label
local function highlightInstance(instanceToHighlight)
    if not highlightingEnabled then return end
    if highlightedObjects[instanceToHighlight] then
        return
    end

    if instanceToHighlight:IsA("BasePart") or instanceToHighlight:IsA("Model") then
        local selectionBox = Instance.new("SelectionBox")
        selectionBox.Color3 = HIGHLIGHT_COLOR
        selectionBox.LineThickness = 0.2
        selectionBox.Transparency = HIGHLIGHT_TRANSPARENCY
        selectionBox.Adornee = instanceToHighlight
        selectionBox.Parent = instanceToHighlight

        local billboardGui = Instance.new("BillboardGui")
        billboardGui.Adornee = instanceToHighlight
        billboardGui.AlwaysOnTop = true
        billboardGui.Size = UDim2.new(0, 200, 0, 30)

        local verticalOffset = 5
        if instanceToHighlight:IsA("BasePart") then
            verticalOffset = instanceToHighlight.Size.Y / 2 + 2
        elseif instanceToHighlight:IsA("Model") then
            local success, extentsSize = pcall(function() return instanceToHighlight:GetExtentsSize() end)
            if success and extentsSize then
                verticalOffset = extentsSize.Y / 2 + 2
            else
                verticalOffset = 5
            end
        end
        billboardGui.StudsOffset = Vector3.new(0, verticalOffset, 0)

        local textLabel = Instance.new("TextLabel")

        local originalName = instanceToHighlight.Name
        local displayName = originalName
        local petNameSuffix = ""

        if string.lower(string.sub(displayName, 1, 3)) == "pet" then
            if string.lower(displayName) == "petegg" then
                displayName = "Egg"
            else
                displayName = string.gsub(displayName, "^[Pp]et", "")
                displayName = string.gsub(displayName, "^%s*(.-)%s*$", "%1")
            end
        end

        local eggSuffixPattern = "[Ee][Gg][Gg]$"

        if string.find(displayName, eggSuffixPattern) and string.lower(displayName) ~= "egg" then
            local prefix = string.gsub(displayName, eggSuffixPattern, "")
            prefix = string.gsub(prefix, "%s*$", "")
            if prefix ~= "" then
                displayName = prefix .. " Egg"
            else
                displayName = "Egg"
            end
        end

        -- Determine the pet name to display
        local formattedEggName = displayName -- Use the cleaned name for lookup
        local eggContents = EGG_CONTENTS[formattedEggName]
        if eggContents then
            -- Initially display the most common pet
            petNameSuffix = " (" .. getMostCommonPet(formattedEggName) .. ")"
        else
            petNameSuffix = " (Unknown Pet)"
        end
        
        local fullText = formattedEggName .. " 🥚" .. petNameSuffix
        textLabel.Text = fullText
        textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
        textLabel.TextStrokeTransparency = 0.2
        textLabel.TextScaled = true
        textLabel.Font = Enum.Font.GothamBold
        textLabel.BackgroundTransparency = 1
        textLabel.Size = UDim2.new(1, 0, 1, 0)
        textLabel.Parent = billboardGui

        billboardGui.Parent = instanceToHighlight

        -- Store the original display name and the components
        highlightedObjects[instanceToHighlight] = {selectionBox, billboardGui, fullText, textLabel, formattedEggName}
    end
end

-- Function to check an instance and decide whether to highlight or unhighlight it
local function processInstance(instance)
    if not instance or not instance.Parent then
        unhighlightInstance(instance)
        return
    end

    if instance:IsA("BasePart") or instance:IsA("Model") then
        local lowerCaseName = string.lower(instance.Name)
        if string.find(lowerCaseName, "egg") and lowerCaseName ~= "egg" and lowerCaseName ~= "petegg" then
            -- Check if it's one of our known egg types for more precise highlighting
            local isKnownEgg = false
            for eggType in pairs(EGG_CONTENTS) do
                if string.lower(eggType) == lowerCaseName or string.lower(eggType) == string.gsub(lowerCaseName, " egg", "") then
                    isKnownEgg = true
                    break
                end
            end

            if isKnownEgg or string.find(lowerCaseName, "egg") then
                    if highlightingEnabled then
                        highlightInstance(instance)
                    else
                        unhighlightInstance(instance)
                    end
            else
                unhighlightInstance(instance)
            end
        else
            unhighlightInstance(instance)
        end
    end
end

-- Function to search and highlight within a specific container and set up dynamic monitoring
local function monitorContainerForEggs(container)
    if not container then return end

    -- Initial processing of existing descendants if highlighting is enabled
    if highlightingEnabled then
        for _, instance in ipairs(container:GetDescendants()) do
            processInstance(instance)
        end
    end

    addConnection(container.DescendantAdded:Connect(function(descendant)
        processInstance(descendant)
        if descendant:IsA("BasePart") or descendant:IsA("Model") then
            addConnection(descendant.Changed:Connect(function(property)
                if property == "Name" then
                    processInstance(descendant)
                end
            end))
        end
    end))

    addConnection(container.DescendantRemoving:Connect(function(descendant)
        unhighlightInstance(descendant)
    end))

    for _, instance in ipairs(container:GetDescendants()) do
        if instance:IsA("BasePart") or instance:IsA("Model") then
            addConnection(instance.Changed:Connect(function(property)
                if property == "Name" then
                    processInstance(instance)
                end
            end)) -- Corrected closing parentheses
        end
    end
end

-- Function to check if an instance is the player's farm based on an "Owner" StringValue
local function isPlayerFarm(instance)
    if not instance or (not instance:IsA("Model") and not instance:IsA("Folder")) then
        return false
    end

    local importantFolder = instance:FindFirstChild("Important")
    if not importantFolder or (not importantFolder:IsA("Model") and not importantFolder:IsA("Folder")) then
        return false
    end

    local dataFolder = importantFolder:FindFirstChild("Data")
    if not dataFolder or (not dataFolder:IsA("Model") and not dataFolder:IsA("Folder")) then
        return false
    end

    local ownerValue = dataFolder:FindFirstChild("Owner") or dataFolder:FindFirstChild("FarmOwner")

    if ownerValue and ownerValue:IsA("StringValue") and ownerValue.Value == LocalPlayer.Name then
        return true
    end

    return false
end

-- Function to find the player's farm and start monitoring it
local function findAndMonitorPlayerFarm()
    for _, descendant in ipairs(workspace:GetDescendants()) do
        if isPlayerFarm(descendant) then
            playerFarm = descendant
            break
        end
    end

    if not playerFarm then
        local startTime = tick()
        repeat
            for _, descendant in ipairs(workspace:GetDescendants()) do
                if isPlayerFarm(descendant) then
                    playerFarm = descendant
                    break
                end
            end
            RunService.Heartbeat:Wait()
        until tick() - startTime > 5
    end

    if playerFarm then
        monitorContainerForEggs(playerFarm)
    else
        addConnection(workspace.DescendantAdded:Connect(function(descendant)
            if isPlayerFarm(descendant) then
                playerFarm = descendant
                monitorContainerForEggs(playerFarm)
            end
        end))
    end
end

-- NEW: Function to perform a single randomization on all eggs
local function performRandomization()
    local eggsRandomized = 0
    local foundRarest = false
    local rarestPetFoundName = "" -- NEW: To store the name of the rarest pet found

    for instance, components in pairs(highlightedObjects) do
        local textLabel = components[4]
        local formattedEggName = components[5]
        if textLabel and formattedEggName then
            local randomizedPet = getRandomPetFromEgg(formattedEggName)
            local rarestPet = getRarestPet(formattedEggName)

            textLabel.Text = formattedEggName .. " 🥚 (" .. randomizedPet .. ")"
            eggsRandomized = eggsRandomized + 1

            -- NEW: Change text color based on rarity
            if randomizedPet == rarestPet then
                textLabel.TextColor3 = Color3.fromRGB(0, 255, 0) -- Green for rarest
                if stopOnRarestEnabled then
                    foundRarest = true
                    rarestPetFoundName = randomizedPet -- Capture the name
                end
            else
                textLabel.TextColor3 = Color3.fromRGB(255, 255, 255) -- Revert to white
            end
        end
    end

    if autoRandomizeEnabled then
        if foundRarest and stopOnRarestEnabled then
            autoRandomizeEnabled = false
            if autoRandomizeLoop then
                task.cancel(autoRandomizeLoop)
                autoRandomizeLoop = nil
            end
            autoRandomizeToggle.Text = "🔄 Auto Randomize: OFF ❌"
            autoRandomizeToggle.BackgroundColor3 = Color3.fromRGB(0, 150, 0) -- Back to green OFF
            autoRandomizeToggleStroke.Color = Color3.fromRGB(0, 100, 0)
            statusLabel.Text = "Status: RAREST PET FOUND: " .. rarestPetFoundName .. "! Auto-Randomize Stopped. 🎉" -- Updated text
            statusLabel.TextColor3 = Color3.fromRGB(255, 255, 0) -- Yellow for found rarest
        else
            statusLabel.Text = "Status: Auto-Randomizing... (" .. eggsRandomized .. " eggs updated)"
            statusLabel.TextColor3 = Color3.fromRGB(0, 150, 255) -- Blue for auto-randomizing
        end
    else
        statusLabel.Text = "Status: Randomized " .. eggsRandomized .. " eggs! ✅"
        statusLabel.TextColor3 = Color3.fromRGB(0, 200, 0)
    end
end

-- NEW: Function to start the auto-randomization loop
local function startAutoRandomize()
    if autoRandomizeLoop then return end -- Already running
    autoRandomizeLoop = task.spawn(function()
        while autoRandomizeEnabled do
            performRandomization()
            task.wait(AUTO_RANDOMIZE_INTERVAL)
        end
        autoRandomizeLoop = nil -- Clear the task once it stops
    end)
end

--- GUI Button Event Handlers ---
addConnection(toggleButton.MouseButton1Click:Connect(function()
    highlightingEnabled = not highlightingEnabled
    if highlightingEnabled then
        statusLabel.Text = "Status: ACTIVE ✅"
        statusLabel.TextColor3 = Color3.fromRGB(0, 200, 0)
        toggleButton.Text = "👁️ ESP: ON ✅" -- Text updated
        toggleButton.BackgroundColor3 = Color3.fromRGB(0, 150, 0) -- Green for ON
        toggleButtonStroke.Color = Color3.fromRGB(0, 100, 0)
        if playerFarm then
            for _, instance in ipairs(playerFarm:GetDescendants()) do
                processInstance(instance)
            end
        end
    else
        statusLabel.Text = "Status: INACTIVE 💤"
        statusLabel.TextColor3 = Color3.fromRGB(200, 150, 0)
        toggleButton.Text = "👁️ ESP: OFF 🚫" -- Text updated
        toggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50) -- Dark grey for OFF
        toggleButtonStroke.Color = Color3.fromRGB(30, 30, 30)
        for instance, _ in pairs(highlightedObjects) do
            unhighlightInstance(instance)
        end
        -- If ESP is turned off, also turn off auto-randomize
        if autoRandomizeEnabled then
            autoRandomizeEnabled = false
            if autoRandomizeLoop then
                task.cancel(autoRandomizeLoop)
                autoRandomizeLoop = nil
            end
            autoRandomizeToggle.Text = "🔄 Auto Randomize: OFF ❌"
            autoRandomizeToggle.BackgroundColor3 = Color3.fromRGB(0, 150, 0) -- Green for OFF
            autoRandomizeToggleStroke.Color = Color3.fromRGB(0, 100, 0)
        end
    end
end))

-- Manual Randomize Button Click Handler with Cooldown
addConnection(randomizeButton.MouseButton1Click:Connect(function()
    local currentTime = tick()
    if currentTime - lastRandomizeTime < RANDOMIZE_COOLDOWN_TIME then
        -- Start or update cooldown animation
        local initialRemainingTime = math.ceil(RANDOMIZE_COOLDOWN_TIME - (currentTime - lastRandomizeTime))
        if initialRemainingTime > 0 then
            statusLabel.TextColor3 = Color3.fromRGB(255, 100, 0) -- Orange for cooldown
            for i = initialRemainingTime, 1, -1 do
                statusLabel.Text = "Status: Cooldown! Wait " .. i .. "s ⏳"
                task.wait(1)
            end
            -- After cooldown, revert status label
            if not autoRandomizeEnabled then -- Only reset if auto-randomize isn't active
                statusLabel.Text = "Status: Ready! ✅"
                statusLabel.TextColor3 = Color3.fromRGB(0, 200, 0)
            end
        end
        return -- Exit function if on cooldown
    end

    lastRandomizeTime = currentTime -- Update last clicked time
    performRandomization() -- Perform a single randomization
end))

-- NEW: Auto Randomize Toggle Handler
addConnection(autoRandomizeToggle.MouseButton1Click:Connect(function()
    if not highlightingEnabled then
        statusLabel.Text = "Status: Enable ESP first! 🚫"
        statusLabel.TextColor3 = Color3.fromRGB(255, 50, 50)
        return
    end

    autoRandomizeEnabled = not autoRandomizeEnabled
    if autoRandomizeEnabled then
        autoRandomizeToggle.Text = "🔄 Auto Randomize: ON ✅"
        autoRandomizeToggle.BackgroundColor3 = Color3.fromRGB(0, 100, 200) -- Blue for ON (distinct from image's off green)
        autoRandomizeToggleStroke.Color = Color3.fromRGB(0, 70, 150)
        statusLabel.Text = "Status: Auto-Randomize ON. 🔁"
        statusLabel.TextColor3 = Color3.fromRGB(0, 150, 255)
        startAutoRandomize() -- Start the loop
    else
        autoRandomizeToggle.Text = "🔄 Auto Randomize: OFF ❌"
        autoRandomizeToggle.BackgroundColor3 = Color3.fromRGB(0, 150, 0) -- Green for OFF
        autoRandomizeToggleStroke.Color = Color3.fromRGB(0, 100, 0)
        statusLabel.Text = "Status: Auto-Randomize OFF. 🛑"
        statusLabel.TextColor3 = Color3.fromRGB(200, 150, 0)
        if autoRandomizeLoop then
            task.cancel(autoRandomizeLoop) -- Stop the loop
            autoRandomizeLoop = nil
        end
    end
end))

-- NEW: Rarest Pet Stop Toggle Handler
addConnection(rarestPetStopToggle.MouseButton1Click:Connect(function()
    stopOnRarestEnabled = not stopOnRarestEnabled
    if stopOnRarestEnabled then
        rarestPetStopToggle.Text = "⭐ Auto Stop on Rarest: ON ⭐"
        rarestPetStopToggle.BackgroundColor3 = Color3.fromRGB(100, 50, 200) -- Purple for ON
        rarestPetStopToggleStroke.Color = Color3.fromRGB(60, 30, 150)
        statusLabel.Text = "Status: Auto-Stop on Rarest ENABLED. 🛑"
        statusLabel.TextColor3 = Color3.fromRGB(200, 0, 200) -- Magenta for auto-stop
    else
        rarestPetStopToggle.Text = "⭐ Auto Stop on Rarest: OFF 💤"
        rarestPetStopToggle.BackgroundColor3 = Color3.fromRGB(100, 100, 100) -- Grey for OFF
        rarestPetStopToggleStroke.Color = Color3.fromRGB(70, 70, 70)
        statusLabel.Text = "Status: Auto-Stop on Rarest DISABLED. ✅"
        statusLabel.TextColor3 = Color3.fromRGB(0, 200, 0)
    end
end))

addConnection(killButton.MouseButton1Click:Connect(function()
    for instance, _ in pairs(highlightedObjects) do
        unhighlightInstance(instance)
    end
    for _, connection in ipairs(activeConnections) do
        if connection and connection.Connected then
            connection:Disconnect()
        end
    end
    -- Ensure auto-randomize loop is cancelled
    if autoRandomizeLoop then
        task.cancel(autoRandomizeLoop)
        autoRandomizeLoop = nil
    end
    highlightedObjects = {}
    activeConnections = {}
    mainGui:Destroy()
end))

-- Initial Loading Sequence
local function startLoadingSequence()
    local totalSteps = 100
    local currentProgress = 0

    local function updateProgress(percentage, message)
        progressBarFill.Size = UDim2.new(percentage / 100, 0, 1, 0)
        progressPercentage.Text = math.floor(percentage) .. "%"
        loadingText.Text = message
    end

    local function simulateProgress(duration, message)
        local startProgress = currentProgress
        local targetProgress = startProgress + duration
        local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        
        local tween = TweenService:Create(progressBarFill, tweenInfo, {Size = UDim2.new(targetProgress / 100, 0, 1, 0)})
        tween:Play()
        addConnection(tween.Completed:Connect(function()
            currentProgress = targetProgress
            progressPercentage.Text = math.floor(currentProgress) .. "%"
            loadingText.Text = message
        end))
        task.wait(1)
    end

    updateProgress(0, "Initializing...")
    task.wait(0.5)

    simulateProgress(20, "Scanning workspace...")
    task.wait(1)

    simulateProgress(30, "Detecting player farm...")
    findAndMonitorPlayerFarm()
    task.wait(1)

    simulateProgress(20, "Setting up ESP...")
    task.wait(1)

    simulateProgress(30, "Finishing up! 🎉")
    task.wait(1)

    loadingFrame:Destroy()
    frame.Visible = true
end

startLoadingSequence()
